// App.tsx
import React from "react";
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { HomeScreen } from "./src/screens/HomeScreen";
import { DetailScreen } from "./src/screens/DetailScreen";
import { AppProvider } from "./src/context/AppContext";
export type RootStackParamList = {
  Home: undefined;
  Detail: { id: string };
};
const Stack = createNativeStackNavigator<RootStackParamList>();
export default function App() {
  return (
    <AppProvider>
      <NavigationContainer>
        <Stack.Navigator screenOptions={{ headerShown: true }}>
          <Stack.Screen name="Home" component={HomeScreen} />
          <Stack.Screen name="Detail" component={DetailScreen} />
        </Stack.Navigator>
      </NavigationContainer>
    </AppProvider>
  );
}
// src/context/AppContext.tsx
import React, { createContext, useContext, useReducer } from "react";
type State = { favorites: string[] };
type Action = { type: "ADD_FAVORITE"; id: string } | { type: "REMOVE_FAVORITE"; id: string };
const initialState: State = { favorites: [] };
function reducer(state: State, action: Action): State {
  switch (action.type) {
    case "ADD_FAVORITE":
      return { ...state, favorites: [...state.favorites, action.id] };
    case "REMOVE_FAVORITE":
      return { ...state, favorites: state.favorites.filter((f) => f !== action.id) };
    default:
      return state;
  }
}
const AppContext = createContext<{ state: State; dispatch: React.Dispatch<Action> } | undefined>(
  undefined
);
export const AppProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(reducer, initialState);
  return <AppContext.Provider value={{ state, dispatch }}>{children}</AppContext.Provider>;
};
export function useAppContext() {
  const context = useContext(AppContext);
  if (!context) throw new Error("useAppContext must be used inside AppProvider");
  return context;
}
// src/screens/HomeScreen.tsx
import React from "react";
import { View, Text, Button } from "react-native";
import { NativeStackScreenProps } from "@react-navigation/native-stack";
import { RootStackParamList } from "../../App";
type Props = NativeStackScreenProps<RootStackParamList, "Home">;
export function HomeScreen({ navigation }: Props) {
  return (
    <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
      <Text>Home Screen</Text>
      <Button title="Go to Detail" onPress={() => navigation.navigate("Detail", { id: "123" })} />
    </View>
  );
}
// src/screens/DetailScreen.tsx
import React from "react";
import { View, Text, Button } from "react-native";
import { NativeStackScreenProps } from "@react-navigation/native-stack";
import { RootStackParamList } from "../../App";
import { useAppContext } from "../context/AppContext";
type Props = NativeStackScreenProps<RootStackParamList, "Detail">;
export function DetailScreen({ route }: Props) {
  const { id } = route.params;
  const { state, dispatch } = useAppContext();
  const isFavorite = state.favorites.includes(id);
  return (
    <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
      <Text>Detail Screen - ID: {id}</Text>
      <Button
        title={isFavorite ? "Remove from Favorites" : "Add to Favorites"}
        onPress={() =>
          dispatch({ type: isFavorite ? "REMOVE_FAVORITE" : "ADD_FAVORITE", id })
        }
      />
    </View>
  );
}
// __tests__/App.test.tsx
import React from "react";
import { render } from "@testing-library/react-native";
import App from "../App";
describe("App root", () => {
  it("renders without crashing", () => {
    const { getByText } = render(<App />);
    expect(getByText("Home Screen")).toBeTruthy();
  });
});